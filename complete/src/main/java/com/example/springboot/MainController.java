package com.example.springboot;

import com.example.springboot.Recipe;
//import com.sun.org.apache.xpath.internal.operations.Bool;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RecipeRepository recipeRepository;

    @Autowired
    private StepsRepository stepsRepository;

    @GetMapping("/steps")
    public List<Steps> getSteps() {
        List<Steps> stepsList = (List<Steps>) stepsRepository.findAll();

        return stepsList;

    }

    @GetMapping("/steps/{recipeid}")
    public List<Steps> getStepsById(@PathVariable int recipeid) {
        List<Steps> stepsList = (List<Steps>) stepsRepository.findByrecipeid(recipeid);

        return stepsList;

    }

    @GetMapping("/recipes")
    public List<Recipe> getRecipes() {
        List<Recipe> recipe_list = (List<Recipe>) recipeRepository.findAll();

       return recipe_list;

    }

    @GetMapping("/recipes/edit/{id}")
    public Recipe getRecipe(@PathVariable int id) {
        return recipeRepository.findById(id).orElse(null);

    }

    @PutMapping("/steps/reorder/{id}")
    void updateOrder(@PathVariable int id, @RequestBody String newPosition ) {
        Steps step = stepsRepository.findById(id).get();
        step.setStep_order(Integer.parseInt(newPosition));
        stepsRepository.save(step);
    }
    @PostMapping("/steps")
    void addStep(@RequestBody Steps step) {
        stepsRepository.save(step);
    }



    @PutMapping("/recipes/edit/{id}")
    void updateRecipe(@PathVariable int id, @RequestBody Recipe recipe ) {
        Recipe recipe_ = recipeRepository.findById(id).get();
        recipe_.setTitle(recipe.getTitle());
        recipe_.setDescription(recipe.getDescription());
        recipe_.setType(recipe.getType());
        recipe_.setPreparationtime(recipe.getPreparationtime());
        recipe_.setCookingtimeime(recipe.getCookingtime());
        recipe_.setContent(recipe.getContent());
        recipe_.setDifficulty(recipe.getDifficulty());

        recipeRepository.save(recipe_);
    }
    @PutMapping("/recipes/updateTitle/{id}")
    void updateTitle(@PathVariable int id, @RequestBody String huhu ) {
        Recipe recipe_ = recipeRepository.findById(id).get();
        recipe_.setTitle(huhu);

        recipeRepository.save(recipe_);
    }

    @PutMapping("/recipes/favorize/{id}")
        void favorize(@PathVariable int id, @RequestBody String title) {
        Recipe recipe_ = recipeRepository.findById(id).get();
        if(recipe_.getFavorite() == true)
            recipe_.setFavorite(false);
        else if(recipe_.getFavorite() == false)
            recipe_.setFavorite(true);
        recipe_.setTitle(title);

        recipeRepository.save(recipe_);
    }

    @GetMapping("/recipes/filter/{term}/{kind}")
    public List<Recipe>  filter(@PathVariable String term, @PathVariable String kind){
        List<Recipe> recipe_list_filter =  new ArrayList<Recipe>();;
        List<Recipe> recipe_list =  new ArrayList<Recipe>();;
        recipe_list = (List<Recipe>) recipeRepository.findAll();
        recipe_list.sort((object1, object2) -> object1.getTitle().compareTo(object2.getTitle()));

        if (term.equals("A-Z") && kind.equals("title")) {
            recipe_list.sort((object1, object2) -> object1.getTitle().compareTo(object2.getTitle()));
            return recipe_list;
        }
        else if (term.equals("Z-A") && kind.equals("title")) {
            recipe_list.sort((object1, object2) -> object2.getTitle().compareTo(object1.getTitle()));
            return recipe_list;
        }
        else if (term.equals("A-Z") && kind.equals("type")) {
            recipe_list.sort((object1, object2) -> object1.getType().compareTo(object2.getType()));
            return recipe_list;
        }
        else if (term.equals("Z-A") && kind.equals("type")) {
            recipe_list.sort((object1, object2) -> object2.getType().compareTo(object1.getType()));
            return recipe_list;
        }
        else if (term.equals("ascending order") && kind.equals("preptime")) {
            recipe_list.sort((object1, object2) -> object1.getPreparationtime().compareTo(object2.getPreparationtime()));
            return recipe_list;
        }
        else if (term.equals("descending order") && kind.equals("preptime")) {
            recipe_list.sort((object1, object2) -> object2.getPreparationtime().compareTo(object1.getPreparationtime()));
            return recipe_list;
        }
        else if (term.equals("ascending order") && kind.equals("cooktime")) {
            recipe_list.sort((object1, object2) -> object1.getCookingtime().compareTo(object2.getCookingtime()));
            return recipe_list;
        }
        else if (term.equals("descending order") && kind.equals("cooktime")) {
            recipe_list.sort((object1, object2) -> object2.getCookingtime().compareTo(object1.getCookingtime()));
            return recipe_list;
        }

        if (!term.isEmpty() && kind.equals("type")) {
            recipe_list_filter.addAll(recipeRepository.findByType(term));
            recipe_list_filter.sort((object1, object2) -> object1.getTitle().compareTo(object2.getTitle()));
            return recipe_list_filter;
        }
        if (NumberUtils.isCreatable(term) && kind.equals("preptime")) {
            int prep_time = Integer.parseInt(term);
            recipe_list_filter.addAll(recipeRepository.findByPreparationtime(prep_time));
            recipe_list_filter.sort((object1, object2) -> object1.getTitle().compareTo(object2.getTitle()));
            return recipe_list_filter;
        }
        if (NumberUtils.isCreatable(term) && kind.equals("cooktime")) {
            int cook_time = Integer.parseInt(term);
            recipe_list_filter.addAll(recipeRepository.findByCookingtime(cook_time));
            recipe_list_filter.sort((object1, object2) -> object1.getTitle().compareTo(object2.getTitle()));
            return recipe_list_filter;
        }

        return recipe_list;
    }

   @GetMapping("/recipes/search/{title}")
    public List<Recipe>  Search_2(@PathVariable String title ) {
        HashSet<Recipe> recipe_set = new HashSet<>();
        //int i = Integer.parseInt(title);

       if(NumberUtils.isCreatable(title)) {
           int prep_cooktime = Integer.parseInt(title);

           if (recipeRepository.existsRecipeByPreparationtime(prep_cooktime)) {
               recipe_set.addAll(recipeRepository.findByPreparationtime(prep_cooktime));
           }
           if (recipeRepository.existsRecipeByCookingtime(prep_cooktime)) {
               recipe_set.addAll(recipeRepository.findByCookingtime(prep_cooktime));
           }
       } else{
           if(recipeRepository.existsRecipeByTitle(title)) {
               recipe_set.addAll(recipeRepository.findByTitle(title)) ;
           }

           if(recipeRepository.existsRecipeByType(title)) {
               recipe_set.addAll(recipeRepository.findByType(title)) ;
           }
       }


       List<Recipe> recipe_list =  new ArrayList<Recipe>(recipe_set);;
        return recipe_list;

    }
    @GetMapping("/recipes/favorites")
    public List<Recipe>  listFavorites() {
        List<Recipe> recipe_list = (List<Recipe>) recipeRepository.findByFavorite(true);

        return recipe_list;

    }

    @PostMapping("/recipes")
    void addUser(@RequestBody Recipe recipe) {
        recipeRepository.save(recipe);
    }

    @DeleteMapping("/recipes/delete/{id}")
    public void deleteRecipe(@PathVariable int id){
        recipeRepository.deleteById(id);
    }

    @DeleteMapping("/steps/delete/{id}")
    public void deleteStep(@PathVariable int id){
        stepsRepository.deleteById(id);
    }
}
